import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import Swal from "sweetalert2";
import { RootState, AppThunk } from "./store";
import userApi from "api/userApi";

export interface AdminState {
  isAdmin: boolean;
  status: "done" | "loading";
}

const initialState: AdminState = {
  isAdmin: false,
  status: "done",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const checkIsAdminAsync = createAsyncThunk(
  "admin/getInit",
  async (token: string, { rejectWithValue }) => {
    try {
      const response = await userApi.isAdmin(token);
      return {
        isAdmin: true,
        status: "done",
      };
    } catch (err) {
      // Use `err.response.data` as `action.payload` for a `rejected` action,
      // by explicitly returning it using the `rejectWithValue()` utility
      return rejectWithValue(err);
    }
  }
);

export const adminSlice = createSlice({
  name: "admin",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(checkIsAdminAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(checkIsAdminAsync.fulfilled, (state, action) => {
        state.status = "done";
        // return follow action
        state.isAdmin = true;
      });
    // .addCase(checkIsAdminAsync.rejected, (state, action) => {
    //   state.status = "done";
    //   Swal.fire({
    //     timer: 2000,
    //     icon: "error",
    //     title: "Bạn không đủ quyền để truy cập vào đây",
    //     text: action.payload.toString(),
    //   });
    // });
  },
});

export const {} = adminSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectIsAdmin = (state: RootState) => state.admin.isAdmin;
export const selectStatus = (state: RootState) => state.admin.status;

export default adminSlice.reducer;
